apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  labels:
    getapp: api
    chart: {{ template "getapp-api.chart" . }}
    draft: {{ .Values.draft | default "draft-app" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    gitlabrelease: "{{ .Values.gitlabrelease }}"
spec:
  revisionHistoryLimit: 0
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      getapp: api
  template:
    metadata:
      labels:
        getapp: api
      annotations:
        buildID: {{ .Values.buildID | default "" | quote }}
    spec:
      {{- if .Values.isOpenShift }}
      serviceAccountName: {{ .Release.Namespace }}-getapp-run-as-root
      {{- end }}
      containers:
        - name: api
          image: "{{ .Values.repository }}api:{{ .Values.tag.api }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          # livenessProbe:
          #   exec:
          #     command:
          #       - curl
          #       - '-f'
          #       - '{{ .Values.webProtocol }}api-{{ .Values.nameSpace }}.{{ .Values.routeMainlUrl }}/docs/'
          #   initialDelaySeconds: 60
          #   timeoutSeconds: 3
          #   periodSeconds: 30
          #   successThreshold: 1
          #   failureThreshold: 2
          {{- if .Values.isOpenShift }}
          securityContext:
            runAsUser: 0
          {{- end }}
          resources:
            limits:
              cpu: 500m
              memory: 300Mi
            requests:
              cpu: 500m
              memory: 300Mi
          {{- if .Values.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          {{- end }}
          envFrom:
            - configMapRef:
                name: "getapp-{{ .Values.nameSpace }}"
          # env:
          #   - name: POSTGRES_PASSWORD   # Name of the environment variable
          #     valueFrom:
          #       secretKeyRef:
          #         name: "postgres-{{ .Values.nameSpace }}-pguser-postgres-{{ .Values.nameSpace }}"
          #         key: password
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
