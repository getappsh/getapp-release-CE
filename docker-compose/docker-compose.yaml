#--------------------------------------------------
# GETAPP_RELEASE_TAG: ${GETAPP_RELEASE_TAG}
# docker compose file for deploying getapp on elbit VM
#--------------------------------------------------


version: '3.6'
services:
  api:
    container_name: api
    image: harbor.getapp.sh/getapp-dev/api:${API_TAG}
    restart: always
    env_file:
      - .env.dev
    networks:
      - getapp
    ports:
      - 3000:3000
    depends_on:
      - broker

  delivery:
    container_name: delivery
    image: harbor.getapp.sh/getapp-dev/delivery:${DELIVERY_TAG}
    restart: always
    env_file:
      - .env.dev
    environment:
      USE_CACHE: 'true'
      USE_MAP_CACHE: 'true'
    networks:
      - getapp
    depends_on:
      - broker

  deploy:
    container_name: deploy
    image: harbor.getapp.sh/getapp-dev/deploy:${DEPLOY_TAG}
    restart: always
    env_file:
      - .env.dev
    networks:
      - getapp
    depends_on:
      - broker

  discovery:
    container_name: discovery
    image: harbor.getapp.sh/getapp-dev/discovery:${DISCOVERY_TAG}
    restart: always
    env_file:
      - .env.dev
    networks:
      - getapp
    depends_on:
      - broker

  offering:
    container_name: offering
    image: harbor.getapp.sh/getapp-dev/offering:${OFFERING_TAG}
    restart: always
    env_file:
      - .env.dev
    networks:
      - getapp
    depends_on:
      - broker

  project-management:
    container_name: project-management
    image: harbor.getapp.sh/getapp-dev/project-managment:${PROJECT_MANAGEMENT_TAG}
    restart: always
    env_file:
      - .env.dev
    networks:
      - getapp
    depends_on:
      - broker

  upload:
    container_name: upload
    image: harbor.getapp.sh/getapp-dev/upload:${UPLOAD_TAG}
    restart: always
    env_file:
      - .env.dev
    networks:
      - getapp
    depends_on:
      - broker

  docs:
    container_name: docs
    image: harbor.getapp.sh/getapp-dev/docs:${DOCS_TAG}
    restart: always
    env_file:
      - .env.dev
    networks:
      - getapp
    ports:
      - 3020:80


  getmap-node:
    container_name: getmap
    image: harbor.getapp.sh/getapp-dev/getmap-node:${GETMAP_TAG}
    restart: always
    env_file:
      - .env.dev
    environment:
      LIBOT_DISCOVERY_URL: http://libot-emu:3010/api/getRecords
      LIBOT_EXPORT_URL: http://libot-emu:3010/api/export
      LIBOT_CALLBACK_URL: http://api:3000/api/map/export-notification
      TOKEN_LIBOT: "eyJhbGciOiJSUzI1NiIsImtpZCI6Im1hcC1jb2xvbmllcy1pbnQifQ.eyJkIjpbInJhc3RlciIsInJhc3RlckV4cG9ydCJdLCJpYXQiOjE2NzYyMTQ5NzIsInN1YiI6ImdldE1hcEN1c3RvbWVyIiwiaXNzIjoibWFwY29sb25pZXMtdG9rZW4tY2xpIn0.TYqpoyw_s1JXoELi2k2wGJ3vEvlt3JH5KexGOeKPKeBWWVMVUkXnU0pDJSMLRNwLvlnkEa0hRT2Ktw9bVcL5lVytHR4Yex_8Tv0EA1RQyrcQ-MndumuwI4O6-6dqI5iGAmd6SAhBSP3cOkdsYDhRz_IT4ZQrqmN17Lty9UfQNEGLJnsH-egc8aQKe3iGas8G5uZE8QlQJkw8k9HMObSk1J70IHmp75S1JEZ3Jvk0fymaeVyAuh1_TLixOPoVFc65vGti2uplMRiylsZNxPML1fAHcLWVZP_VnB_IbcGKiHeWWTxJmVruV6iANCFSiQI8S1GnyA15afJbKZw5ByTAIg"
      MC_CSW_REF_DATE: "2023-10-15T00:00:01Z"
      TARGET_RESOLUTION: '17'
      MC_MIN_RESOLUTION_DEG: "4.29153E-05"
      MC_MAX_RESOLUTION_DEG: "1.34110E-06"
      UPDATE_GOB_TIME: '0 0 */6 * * *'
      LIBOT_EMULATOR: true

    networks:
      - getapp
    depends_on:
      - broker
  
  dashboard:
    container_name: dashboard
    image: harbor.getapp.sh/getapp-dev/dashboard:${DASHBOARD_TAG}
    restart: always
    env_file:
      - .env.production
    # networks:
    #   - getapp
    ports:
      - 3002:3002
    command: sh -c "npm run build && npm run start"


  libot-emu:
    container_name: libot-emu
    image: harbor.getapp.sh/getapp-dev/libot-emu:1.3.6
    restart: always
    environment:
      LIBOT_SERVER_ADDRESS: http://libot-emu:3010

    networks:
      - getapp

  broker:
    image: confluentinc/cp-kafka:7.4.1
    hostname: broker
    container_name: broker
    networks:
        - getapp
    ports:
    - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_NUM_PARTITIONS: "5"


  pg:
    container_name: postgres
    image: postgres:14.1
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: J3-X}plSnqw5M~c
      POSTGRES_DB: get_app
    ports:
      - 5432:5432
    networks:
      - getapp
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - 5050:80
    networks:
      - getapp

  keycloak:
    hostname: keycloak
    container_name: keycloak
    image: quay.io/keycloak/keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=password
    ports:
      - 8080:8080
      - 8443:8443
      - 8787:8787 # debug port
    volumes:
      - keycloak:/opt/keycloak/data
      - './kc-data/realm:/opt/keycloak/data/import'
    command:  
      - "start-dev" 
      - "--import-realm"
    networks:
      - getapp 
  

networks:
  getapp:
    driver: bridge

volumes:
  keycloak:
  postgres_data:
